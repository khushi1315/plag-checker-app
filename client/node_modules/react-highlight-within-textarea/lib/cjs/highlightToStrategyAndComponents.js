"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.highlightToStrategyAndComponents = void 0;
const React = __importStar(require("react"));
const highlightToStrategyAndComponents = (highlight, classHint, componentHint) => {
    let result;
    if (highlight instanceof RegExp) {
        result = [regExpToSAndC(highlight, classHint, componentHint)];
    }
    else if (typeof highlight == "string") {
        result = [stringToSAndC(highlight, classHint, componentHint)];
    }
    else if (typeof highlight == "function") {
        result = [strategyToSAndC(highlight, classHint, componentHint)];
    }
    else if (highlight instanceof Object && "highlight" in highlight) {
        result = customToSAndCs(highlight, classHint, componentHint);
    }
    else if (highlight instanceof Array) {
        if (highlight.length === 2 &&
            typeof highlight[0] === "number" &&
            typeof highlight[1] === "number") {
            result = [rangeToSAndC(highlight, classHint, componentHint)];
        }
        else {
            result = arrayToSAndCs(highlight, classHint, componentHint);
        }
    }
    else {
        throw new TypeError(`Not a Highlight type: ${highlight}`);
    }
    return result;
};
exports.highlightToStrategyAndComponents = highlightToStrategyAndComponents;
function arrayToSAndCs(highlight, className, component) {
    const sAndCs = highlight.map((h) => (0, exports.highlightToStrategyAndComponents)(h, className, component));
    return Array.prototype.concat.apply([], sAndCs);
}
function strategyToSAndC(strategy, className, component) {
    return {
        strategy: strategy,
        component: hwtComponent(className, component),
    };
}
function regExpToSAndC(highlight, className, component) {
    const regExpStrategy = (text, callback) => {
        let matchArr, start;
        while ((matchArr = highlight.exec(text)) !== null) {
            start = matchArr.index;
            callback(start, start + matchArr[0].length);
        }
    };
    return {
        strategy: regExpStrategy,
        component: hwtComponent(className, component),
    };
}
function stringToSAndC(highlight, className, component) {
    const stringStrategy = (text, callback) => {
        const textLower = text.toLowerCase();
        const strLower = highlight.toLowerCase();
        let index = 0;
        while (((index = textLower.indexOf(strLower, index)), index !== -1)) {
            callback(index, index + strLower.length);
            index += strLower.length;
        }
    };
    return {
        strategy: stringStrategy,
        component: hwtComponent(className, component),
    };
}
function rangeToSAndC(highlight, className, component) {
    const rangeStrategy = (text, callback) => {
        const low = Math.max(0, highlight[0]);
        const high = Math.min(highlight[1], text.length);
        if (low < high) {
            callback(low, high);
        }
    };
    return {
        strategy: rangeStrategy,
        component: hwtComponent(className, component),
    };
}
function customToSAndCs(highlight, className, component) {
    const hl = highlight.highlight;
    className = 'className' in highlight ? highlight.className : className;
    component = 'component' in highlight ? highlight.component : component;
    return (0, exports.highlightToStrategyAndComponents)(hl, className, component);
}
const hwtComponent = (className, Component) => {
    if (Component) {
        const Cmp = Component;
        return (props) => React.createElement(Cmp, Object.assign({ className: className }, props));
    }
    else {
        return (props) => React.createElement("mark", { className: className }, props.children);
    }
};
