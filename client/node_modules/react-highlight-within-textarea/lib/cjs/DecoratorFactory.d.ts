import React, { FC } from "react";
import { ContentBlock, ContentState, CompositeDecorator } from "draft-js";
import { Component, Highlight, BlockSpan, Strategy } from "./types";
declare global {
    interface Console {
        profile: (label: string) => void;
        profileEnd: (label: string) => void;
    }
}
type ClassName = string;
type BlockKey = string;
type SpanStart = number;
type ThisMap = Map<Component | undefined, Map<ClassName | undefined, Map<BlockKey, Map<SpanStart, BlockSpan>>>>;
type DecoratorCache = Map<Function | undefined, Map<ClassName | undefined, {
    component: FC;
    strategy: Strategy;
}>>;
export declare class DecoratorFactory {
    map: ThisMap;
    decoratorCache: DecoratorCache;
    constructor();
    updateBlockSpans(blockSpans: BlockSpan[]): void;
    componentFactory(component: Component | undefined, className: string | undefined): React.MemoExoticComponent<(props: {
        children?: Array<React.ReactNode>;
        decoratedText: string;
    }) => React.JSX.Element> | ((props: {
        children?: Array<React.ReactNode>;
        blockKey: string;
        start: number;
        end: number;
    }) => React.JSX.Element);
    strategyFactory(component: Component | undefined, className: ClassName | undefined): (block: ContentBlock, callback: (start: number, end: number) => void) => void;
    toDecorators(blockSpans: BlockSpan[]): {
        component: FC;
        strategy: Strategy;
    }[];
    create(contentState: ContentState, highlight: Highlight, text?: string): CompositeDecorator;
}
export {};
